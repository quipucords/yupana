apiVersion: v1
kind: Template
metadata:
  name: yupana-template
  annotations:
    openshift.io/display-name: "Yupana"
    description: "Subscription Services Project powered by Django+PostgreSQL"
    tags: "quickstart,python,django,postgresql"
    iconClass: "icon-python"
    openshift.io/long-description: "This template defines resources needed to run the Yupana application, including a build configuration, application deployment configuration, and database deployment configuration."
    openshift.io/provider-display-name: "Red Hat, Inc."
    openshift.io/documentation-url: "https://yupana.readthedocs.io/en/latest/"
labels:
  app: yupana
  template: yupana-template
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: python-36-centos7
    namespace: ${NAMESPACE}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: centos/python-36-centos7
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: postgresql
    namespace: ${NAMESPACE}
  spec:
    tags:
    - from:
        kind: DockerImage
        name: centos/postgresql-96-centos7
        resourceVersion: latest
      name: "9.6"
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: yupana
      template: yupana-template
    annotations:
      template.openshift.io/expose-database_name: "{.data['database-name']}"
      template.openshift.io/expose-password: "{.data['database-password']}"
      template.openshift.io/expose-username: "{.data['database-user']}"
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${DATABASE_NAME}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: yupana
      template: yupana-template
    annotations:
      template.openshift.io/expose-django_secret_key: "{.data['django-secret-key']}"
    name: ${NAME}-secret
  stringData:
    django-secret-key: ${DJANGO_SECRET_KEY}
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: yupana-env
    labels:
      name: yupana
  data:
    database-engine: ${DATABASE_ENGINE}
    database-name: ${DATABASE_NAME}
    database-service-name: POSTGRES_SQL
    postgres-sql-service-host: ${NAME}-pgsql.${NAMESPACE}.svc
    postgres-sql-service-port: "5432"
    app-config: ${APP_CONFIG}
    app-home: ${APP_HOME}
    app-module: ${APP_MODULE}
    app-namespace: ${NAMESPACE}
    app-domain: ${APP_DOMAIN}
    insights-kafka-server-host: ${KAFKA_HOST}.${KAFKA_NAMESPACE}.svc
    insights-kafka-server-port: ${KAFKA_PORT}
    insights-host-inventory-url: ${INSIGHTS_HOST_INVENTORY_URL}
    retries-allowed: ${RETRIES_ALLOWED}
    retry-time: ${RETRY_TIME}
    minimum-replicas: ${MINIMUM_REPLICAS}
    maximum-replicas: ${MAXIMUM_REPLICAS}
    target-cpu-utilization: ${TARGET_CPU_UTILIZATION}
    log-level: INFO
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "${DATABASE_SERVICE_NAME}", "kind": "Service"}]'
      prometheus.io/scrape: "true"
      prometheus.io/path: /metrics
      prometheus.io/port: "8080"
    name: ${NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${NAME}
    annotations:
      description: "Keeps track of changes in the application image"
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    resources:
      requests:
        memory: ${BUILD_MEMORY_REQUEST}
      limits:
        memory: ${BUILD_MEMORY_LIMIT}
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      dockerStrategy:
        env:
          - name: PIP_INDEX_URL
            value: ${PIP_INDEX_URL}
          - name: PIPENV_PYPI_MIRROR
            value: ${PIPENV_PYPI_MIRROR}
          - name: ENABLE_PIPENV
            value: "true"
          - name: APP_CONFIG
            valueFrom:
              configMapKeyRef:
                name: yupana-env
                key: app-config
                optional: false
          - name: APP_HOME
            valueFrom:
              configMapKeyRef:
                name: yupana-env
                key: app-home
          - name: APP_MODULE
            valueFrom:
              configMapKeyRef:
                name: yupana-env
                key: app-module
          - name: APP_NAMESPACE
            valueFrom:
              configMapKeyRef:
                name: yupana-env
                key: app-namespace
          - name: APP_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: yupana-env
                key: app-domain
        from:
          kind: ImageStreamTag
          name: python-36-centos7:latest
          namespace: ${NAMESPACE}
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    resources:
      requests:
        memory: ${MEMORY_REQUEST}
      limits:
        memory: ${MEMORY_LIMIT}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - name: ${NAME}
          image: ${NAME}
          env:
            - name: DATABASE_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: ${DATABASE_SERVICE_NAME}
                  optional: false
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: ${DATABASE_SERVICE_NAME}
                  optional: false
            - name: DJANGO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: django-secret-key
                  name: ${NAME}-secret
                  optional: false
            - name: DATABASE_ENGINE
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: database-engine
                  optional: false
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: database-name
                  optional: false
            - name: DATABASE_SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: database-service-name
                  optional: false
            - name: POSTGRES_SQL_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: postgres-sql-service-host
                  optional: false
            - name: POSTGRES_SQL_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: postgres-sql-service-port
                  optional: false
            - name: APP_NAMESPACE
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: app-namespace
                  optional: true
            - name: APP_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: app-domain
                  optional: true
            - name: INSIGHTS_KAFKA_HOST
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: insights-kafka-server-host
                  optional: false
            - name: INSIGHTS_KAFKA_PORT
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: insights-kafka-server-port
                  optional: false
            - name: INSIGHTS_HOST_INVENTORY_URL
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: insights-host-inventory-url
                  optional: false
            - name: RETRIES_ALLOWED
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: retries-allowed
                  optional: true
            - name: RETRY_TIME
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: retry-time
                  optional: true
            - name: MINIMUM_REPLICAS
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: minimum-replicas
                  optional: false
            - name: MAXIMUM_REPLICAS
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: maximum-replicas
                  optional: false
            - name: TARGET_CPU_UTILIZATION
              valueFrom:
                configMapKeyRef:
                  name: yupana-env
                  key: target-cpu-utilization
                  optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/subscriptions/v1/status/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/subscriptions/v1/status/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 3
          resources:
            requests:
              memory: ${MEMORY_REQUEST}
            limits:
              memory: ${MEMORY_LIMIT}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
          - ${NAME}
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: yupana
      template: yupana-template
    name: yupana-pgsql
  spec:
    replicas: 1
    selector:
      name: yupana-pgsql
    resources:
      limits:
        memory: ${MEMORY_REQUEST}
      limits:
        memory: ${MEMORY_LIMIT}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: yupana
          name: yupana-pgsql
          template: yupana-template
        name: yupana-pgsql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: ${DATABASE_SERVICE_NAME}
          - name: POSTGRESQL_DATABASE
            value: ${DATABASE_NAME}
          image: postgresql:9.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: yupana-pgsql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              memory: ${POSTGRESQL_MEMORY_REQUEST}
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: yupana-pgsql-data
        volumes:
        - name: yupana-pgsql-data
          persistentVolumeClaim:
            claimName: yupana-pgsql
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - yupana-pgsql
        from:
          kind: ImageStreamTag
          name: postgresql:9.6
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: yupana
      template: yupana-template
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    labels:
      app: yupana
      template: yupana-template
    name: yupana-pgsql
  spec:
    ports:
    - name: yupana-pgsql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    labels:
      app: yupana
    name: yupana
  spec:
    maxReplicas: ${{MAXIMUM_REPLICAS}}
    minReplicas: ${{MINIMUM_REPLICAS}}
    scaleTargetRef:
      apiVersion: v1
      kind: DeploymentConfig
      name: yupana
    targetCPUUtilizationPercentage: ${{TARGET_CPU_UTILIZATION}}
parameters:
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  required: true
  value: yupana
- description: The Name
  displayName: Name
  name: NAME
  required: true
  value: yupana
- description: Initial amount of memory the build container will request.
  displayName: Build Memory Request
  name: BUILD_MEMORY_REQUEST
  required: true
  value: 1Gi
- description: Maximum amount of memory the build container can use.
  displayName: Build Memory Limit
  name: BUILD_MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Initial amount of memory the Django container will request.
  displayName: Memory Request
  name: MEMORY_REQUEST
  required: true
  value: 1Gi
- description: Maximum amount of memory the Django container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 1Gi
- description: Initial amount of memory the PostgreSQL container will request.
  displayName: Memory Request (PostgreSQL)
  name: POSTGRESQL_MEMORY_REQUEST
  required: true
  value: 512Mi
- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit (PostgreSQL)
  name: POSTGRESQL_MEMORY_LIMIT
  required: true
  value: 512Mi
- description: Volume space available for data, e.g. 512Mi, 2Gi
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: The URL of the repository with your application source code.
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/quipucords/yupana.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch.
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository.
  displayName: Context Directory
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the Django service, if left
    blank a value will be defaulted.
  displayName: Application Hostname
  name: APPLICATION_DOMAIN
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: yupana-pgsql
- description: 'Database engine: postgresql, mysql or sqlite (default).'
  displayName: Database Engine
  name: DATABASE_ENGINE
  required: true
  value: postgresql
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: yupana
- displayName: Database Username
  name: DATABASE_USER
  required: true
  value: yupanaadmin
- displayName: Database User Password
  name: DATABASE_PASSWORD
  required: true
  value: admin123
- displayName: Database Admin Password
  value: admin123
  name: DATABASE_ADMIN_PASSWORD
- description: Absolute path to Gunicorn configuration file (optional).
  displayName: Application Configuration File Path
  name: APP_CONFIG
  value: /opt/app-root/src/yupana/gunicorn.py
- description: Absolute path to application install location (optional).
  displayName: Application Home Directory
  name: APP_HOME
  value: /opt/app-root/src/yupana
- description: Python module name of the application (optional).
  displayName: Application Module Name
  name: APP_MODULE
  value: config.wsgi
- description: Set this to a long random string.
  displayName: Django Secret Key
  from: '[a-zA-Z0-9]{50}'
  generate: expression
  name: DJANGO_SECRET_KEY
- description: The custom PyPi index URL
  displayName: Custom PyPi Index URL
  name: PIP_INDEX_URL
- description: The custom PipEnv PyPi index URL
  displayName: Custom PipEnv PyPi Index URL
  name: PIPENV_PYPI_MIRROR
- displayName: User Interface Domain
  value: 'project-yupana.com'
  name: APP_DOMAIN
- displayName: Upgrade pip
  description: Whether to upgrade pip to latest
  name: UPGRADE_PIP_TO_LATEST
  value: ''
- description: Insights Upload Server address
  displayName: Kafka server address
  name: KAFKA_HOST
  required: true
  value: localhost
- description: Insights Upload Server port
  displayName: Kafka server port
  name: KAFKA_PORT
  required: true
  value: "29092"
- description: Insights Upload Server namespace
  displayName: Kafka server namespace
  name: KAFKA_NAMESPACE
  required: true
  value: yupana
- description: Insights Host Inventory Url
  displayName: Insights Host Inventory
  name: INSIGHTS_HOST_INVENTORY_URL
  required: true
  value: http://127.0.0.1:8000/r/insights/platform/inventory/api/v1/hosts
- description: Retry time in minutes
  displayName: Retry time
  name: RETRY_TIME
  required: true
  value: "480"
- description: Number of retries allowed
  displayName: Retries allowed
  name: RETRIES_ALLOWED
  required: true
  value: "5"
- description: Minimum Replicas for Autoscaling
  displayName: Minimum Replicas
  name: MINIMUM_REPLICAS
  required: true
  value: "1"
- description: Maximum Replicas for Autoscaling
  displayName: Maximum Replicas
  name: MAXIMUM_REPLICAS
  required: true
  value: "10"
- description: Target CPU Utilization Percentage
  displayName: Target CPU Utilization
  name: TARGET_CPU_UTILIZATION
  required: true
  value: "75"