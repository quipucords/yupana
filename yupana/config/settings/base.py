#
# Copyright 2018 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

import environ

from .env import ENVIRONMENT

ROOT_DIR = environ.Path(__file__) - 4
APPS_DIR = ROOT_DIR.path('yupana')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENVIRONMENT.get_value('DJANGO_SECRET_KEY',
                                   default='base')
DEBUG = ENVIRONMENT.bool('DJANGO_DEBUG', default=False)
ALLOWED_HOSTS = ENVIRONMENT.get_value('DJANGO_ALLOWED_HOSTS', default=['*'])
INSIGHTS_HOST_INVENTORY_URL = ENVIRONMENT.get_value(
    'INSIGHTS_HOST_INVENTORY_URL',
    default='http://127.0.0.1:8000/r/insights/platform/inventory/api/v1/hosts')

# this is the time in minutes that we want to wait to retry a report
# default is 8 hours
RETRY_TIME = ENVIRONMENT.get_value('RETRY_TIME', default=480)

# this is the number of retries that we want to allow before failing a report
RETRIES_ALLOWED = ENVIRONMENT.get_value('RETRIES_ALLOWED', default=5)

# this is the max number of hosts that we want to upload at a time for bulk
# requests (default is 100)
HOSTS_PER_REQ = ENVIRONMENT.get_value('HOSTS_PER_REQ', default=250)

# this is the max number of hosts per report slice
MAX_HOSTS_PER_REP = ENVIRONMENT.get_value('MAX_HOSTS_PER_REP', default=10000)

# this is the max number of threads that we want to allow per pod
# default is 25
MAX_THREADS = ENVIRONMENT.get_value('MAX_THREADS', default=10)


# Logging
# https://docs.djangoproject.com/en/dev/topics/logging/
# https://docs.python.org/3.6/library/logging.html
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s | %(levelname)s | '
                      '%(filename)s:%(funcName)s:%(lineno)d | %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': ENVIRONMENT.get_value('DJANGO_CONSOLE_LOG_LEVEL', default='INFO'),
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console', ],
            'level': ENVIRONMENT.get_value('DJANGO_LOG_LEVEL', default='INFO'),
        },
    },
}


# Default apps go here
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Any pip installed apps will go here
THIRD_PARTY_APPS = [
    'rest_framework',
    'django_prometheus',
]

# Apps specific to this project go here
LOCAL_APPS = [
    'api'
]


INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
ENGINES = {
    'sqlite': 'django.db.backends.sqlite3',
    'postgresql': 'django.db.backends.postgresql',
    'mysql': 'django.db.backends.mysql',
}

SERVICE_NAME = ENVIRONMENT.get_value('DATABASE_SERVICE_NAME',
                                     default='').upper().replace('-', '_')
if SERVICE_NAME:
    ENGINE = ENGINES.get(ENVIRONMENT.get_value('DATABASE_ENGINE'),
                         ENGINES['postgresql'])
else:
    ENGINE = ENGINES['sqlite']

NAME = ENVIRONMENT.get_value('DATABASE_NAME', default=None)

if not NAME and ENGINE == ENGINES['sqlite']:
    NAME = os.path.join(APPS_DIR, 'db.sqlite3')

DATABASES = {
    'ENGINE': ENGINE,
    'NAME': NAME,
    'USER': ENVIRONMENT.get_value('DATABASE_USER', default=None),
    'PASSWORD': ENVIRONMENT.get_value('DATABASE_PASSWORD', default=None),
    'HOST': ENVIRONMENT.get_value('{}_SERVICE_HOST'.format(SERVICE_NAME),
                                  default=None),
    'PORT': ENVIRONMENT.get_value('{}_SERVICE_PORT'.format(SERVICE_NAME),
                                  default=None),
}

DATABASES = {
    'default': DATABASES
}

PROMETHEUS_EXPORT_MIGRATIONS = False

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = ENVIRONMENT.get_value('DJANGO_STATIC_URL', default='/apidoc/')
STATIC_ROOT = ENVIRONMENT.get_value('DJANGO_STATIC_ROOT', default=str(APPS_DIR.path('staticfiles')))
STATICFILES_DIRS = [
    os.path.join(APPS_DIR, '..', 'apidoc'),
]

# Django Rest Framework
# http://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 10,
}

# Override the initial ingest requirement to allow INITIAL_INGEST_NUM_MONTHS
# pylint: disable=simplifiable-if-expression
INGEST_OVERRIDE = False if os.getenv('INITIAL_INGEST_OVERRIDE', 'False') == 'False' else True

# Insights Kafka messaging address
INSIGHTS_KAFKA_HOST = os.getenv('INSIGHTS_KAFKA_HOST', 'localhost')

# Insights Kafka messaging address
INSIGHTS_KAFKA_PORT = os.getenv('INSIGHTS_KAFKA_PORT', '29092')

# Insights Kafka server address
INSIGHTS_KAFKA_ADDRESS = f'{INSIGHTS_KAFKA_HOST}:{INSIGHTS_KAFKA_PORT}'
